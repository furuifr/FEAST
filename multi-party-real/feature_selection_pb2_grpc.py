# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import feature_selection_pb2 as feature__selection__pb2


class MFSStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendSamplingRowsAndTarget = channel.unary_unary(
                '/featureselection.MFS/SendSamplingRowsAndTarget',
                request_serializer=feature__selection__pb2.SamplingRowsAndTarget.SerializeToString,
                response_deserializer=feature__selection__pb2.Flag.FromString,
                )
        self.SendCrossFeatures = channel.unary_unary(
                '/featureselection.MFS/SendCrossFeatures',
                request_serializer=feature__selection__pb2.CrossFeatures.SerializeToString,
                response_deserializer=feature__selection__pb2.FeatureScores.FromString,
                )
        self.GetMI = channel.unary_unary(
                '/featureselection.MFS/GetMI',
                request_serializer=feature__selection__pb2.Flag.SerializeToString,
                response_deserializer=feature__selection__pb2.FeatureScores.FromString,
                )
        self.GetCrossFeatures = channel.unary_unary(
                '/featureselection.MFS/GetCrossFeatures',
                request_serializer=feature__selection__pb2.SelectedNum.SerializeToString,
                response_deserializer=feature__selection__pb2.CrossFeatures.FromString,
                )
        self.SendDelFeatures = channel.unary_unary(
                '/featureselection.MFS/SendDelFeatures',
                request_serializer=feature__selection__pb2.DelNum.SerializeToString,
                response_deserializer=feature__selection__pb2.Flag.FromString,
                )
        self.GetSelectedFeatures = channel.unary_unary(
                '/featureselection.MFS/GetSelectedFeatures',
                request_serializer=feature__selection__pb2.Flag.SerializeToString,
                response_deserializer=feature__selection__pb2.SelectedFeatures.FromString,
                )


class MFSServicer(object):
    """The greeting service definition.
    """

    def SendSamplingRowsAndTarget(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCrossFeatures(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCrossFeatures(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendDelFeatures(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSelectedFeatures(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MFSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendSamplingRowsAndTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSamplingRowsAndTarget,
                    request_deserializer=feature__selection__pb2.SamplingRowsAndTarget.FromString,
                    response_serializer=feature__selection__pb2.Flag.SerializeToString,
            ),
            'SendCrossFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCrossFeatures,
                    request_deserializer=feature__selection__pb2.CrossFeatures.FromString,
                    response_serializer=feature__selection__pb2.FeatureScores.SerializeToString,
            ),
            'GetMI': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMI,
                    request_deserializer=feature__selection__pb2.Flag.FromString,
                    response_serializer=feature__selection__pb2.FeatureScores.SerializeToString,
            ),
            'GetCrossFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCrossFeatures,
                    request_deserializer=feature__selection__pb2.SelectedNum.FromString,
                    response_serializer=feature__selection__pb2.CrossFeatures.SerializeToString,
            ),
            'SendDelFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.SendDelFeatures,
                    request_deserializer=feature__selection__pb2.DelNum.FromString,
                    response_serializer=feature__selection__pb2.Flag.SerializeToString,
            ),
            'GetSelectedFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSelectedFeatures,
                    request_deserializer=feature__selection__pb2.Flag.FromString,
                    response_serializer=feature__selection__pb2.SelectedFeatures.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'featureselection.MFS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MFS(object):
    """The greeting service definition.
    """

    @staticmethod
    def SendSamplingRowsAndTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/featureselection.MFS/SendSamplingRowsAndTarget',
            feature__selection__pb2.SamplingRowsAndTarget.SerializeToString,
            feature__selection__pb2.Flag.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendCrossFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/featureselection.MFS/SendCrossFeatures',
            feature__selection__pb2.CrossFeatures.SerializeToString,
            feature__selection__pb2.FeatureScores.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/featureselection.MFS/GetMI',
            feature__selection__pb2.Flag.SerializeToString,
            feature__selection__pb2.FeatureScores.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCrossFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/featureselection.MFS/GetCrossFeatures',
            feature__selection__pb2.SelectedNum.SerializeToString,
            feature__selection__pb2.CrossFeatures.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendDelFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/featureselection.MFS/SendDelFeatures',
            feature__selection__pb2.DelNum.SerializeToString,
            feature__selection__pb2.Flag.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSelectedFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/featureselection.MFS/GetSelectedFeatures',
            feature__selection__pb2.Flag.SerializeToString,
            feature__selection__pb2.SelectedFeatures.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
